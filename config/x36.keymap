/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT  0
#define NUM_MODS 1
#define BT_CTRL  2

/ {
    combos {
        compatible = "zmk,combos";

        a {
            bindings = <&kp ESCAPE>;
            key-positions = <1 0>;
        };

        b {
            bindings = <&kp CAPS>;
            key-positions = <11 10>;
        };

        c {
            bindings = <&kp TAB>;
            key-positions = <12 11 10>;
        };

        d {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        e {
            bindings = <&kp ENTER>;
            key-positions = <19 18>;
        };

        f {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
        };

        g {
            bindings = <&kp EQUAL>;
            key-positions = <17 18>;
        };

        h {
            bindings = <&bootloader>;
            key-positions = <24 18>;
        };

        j {
            bindings = <&kp CAPS>;
            key-positions = <10 11>;
        };

        i {
            bindings = <&kp LSHIFT>;
            key-positions = <29 28>;
        };

        WAVE {
            bindings = <&kp GRAVE>;
            key-positions = <0 1 2>;
        };
    };

    behaviors {
        command: command {
            compatible = "zmk,behavior-tap-dance";
            label = "COMMAND";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp LEFT_COMMAND>;
        };

        layber: layber {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYBER";
            #binding-cells = <0>;
            bindings = <&lt 1 DELETE>, <&lt 2 DELETE>, <&lt 3 DELETE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q  &kp W      &kp E      &kp R     &kp T               &kp Y                      &kp U    &kp I      &kp O    &kp P
  &kp A  &kp S      &kp D      &kp F     &kp G               &kp H                      &kp J    &kp K      &kp L    &kp SEMI
  &kp Z  &kp X      &kp C      &kp V     &kp B               &kp N                      &kp M    &kp COMMA  &kp DOT  &kp FSLH
         &lt 2 SQT  &kp SPACE  &command  &lt 1 LEFT_BRACKET  &mt RIGHT_SHIFT BACKSPACE  &layber
            >;
        };

        num_mods {
            bindings = <
  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5            &kp N6             &kp N7         &kp N8        &kp N9                &kp N0
  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT       &kp CARET          &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &none            &none        &none     &none       &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none          &none         &none                 &none
                   &none        &none     &none       &none             &none              &none
            >;
        };

        layer_3 {
            bindings = <
  &kp F1    &kp F2      &kp F3     &kp F4  &kp F5  &kp F6    &kp F7    &kp F8  &trans     &trans
  &kp LEFT  &kp DOWN    &kp RIGHT  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
  &trans    &trans      &trans     &trans  &trans  &trans    &trans    &trans  &trans     &trans
            &sys_reset  &none      &trans  &trans  &trans    &trans
            >;
        };

        bt_control {
            bindings = <
  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)   &kp N7        &kp N8        &kp N9        &kp MINUS  &kp EQUAL
  &none             &kp LEFT_ARROW    &kp DEL           &kp RIGHT         &bt BT_CLR   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans     &trans
  &bt BT_SEL 3      &bt BT_SEL 2      &bt BT_SEL 1      &bt BT_SEL 0      &bootloader  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans     &trans
                    &none             &none             &none             &none        &kp N0        &trans
            >;
        };
    };
};
